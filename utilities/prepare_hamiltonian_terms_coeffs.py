def parse_hamiltonian_terms(hamiltonian_terms, num_qubits=6):
    hamiltonian_terms_paulis = []
    hamiltonian_terms_coeffs = []

    for coeff, pauli_str in hamiltonian_terms:
        # Start with identity on all qubits
        pauli_list = ['I'] * num_qubits

        # If the string is not empty, parse it
        if pauli_str:
            ops = pauli_str.split()
            for op in ops:
                pauli_type = op[0]
                qubit_idx = int(op[1:])
                pauli_list[qubit_idx] = pauli_type

        hamiltonian_terms_paulis.append(''.join(pauli_list))
        hamiltonian_terms_coeffs.append(coeff.real)  # use real part only

    return hamiltonian_terms_paulis, hamiltonian_terms_coeffs

hamiltonian_terms = [
    (-1.0554319189+0j, ""),
    (0.005687376+0j, "X0 X1 X2"),
    (-0.0075995998+0j, "X0 X1 X3"),
    (0.03083671315+0j, "X0 X1 X3 X4"),
    (0.0075995998+0j, "X0 X1 X3 Z4"),
    (0.03083671315+0j, "X0 X1 Y3 Y4 Z5"),
    (0.02598776945+0j, "X0 X1 Z3 Y4 Y5"),
    (0.02598776945+0j, "X0 X1 X4 X5"),
    (-0.0075572992+0j, "X0 X1 Z4 X5"),
    (0.0075572992+0j, "X0 X1 X5"),
    (0.0052721056+0j, "X0 Y1 Y2"),
    (0.03194549195+0j, "X0 Y1 Y2 X3 Y4 Y5"),
    (-0.03194549195+0j, "X0 Y1 Y2 Y3 Y4 X5"),
    (0.0144043803+0j, "X0 Y1 Y2 Z3"),
    (0.03225585715+0j, "X0 Y1 Y2 Z3 X4"),
    (-0.00435703135+0j, "X0 Y1 Y2 Z3 Z4"),
    (-0.03225585715+0j, "X0 Y1 Y2 X4 Z5"),
    (0.0149395093+0j, "X0 Y1 Y2 Z4 Z5"),
    (-0.0044758372+0j, "X0 Y1 Y2 Z5"),
    (0.0196517029+0j, "X0 Z1 X2"),
    (-0.04116096325+0j, "X0 Z1 X3"),
    (0.0075995998+0j, "X0 Z1 X3 X4"),
    (0.04116096325+0j, "X0 Z1 X3 Z4"),
    (0.0075995998+0j, "X0 Z1 Y3 Y4 Z5"),
    (-0.01742661745+0j, "X0 Z1 Z3 Y4 Y5"),
    (-0.01742661745+0j, "X0 Z1 X4 X5"),
    (-0.0420817086+0j, "X0 Z1 Z4 X5"),
    (0.0420817086+0j, "X0 Z1 X5"),
    (-0.0321878783+0j, "X0 X2"),
    (0.04116096325+0j, "X0 X3"),
    (-0.0075995998+0j, "X0 X3 X4"),
    (-0.04116096325+0j, "X0 X3 Z4"),
    (-0.0075995998+0j, "X0 Y3 Y4 Z5"),
    (0.01742661745+0j, "X0 Z3 Y4 Y5"),
    (0.01742661745+0j, "X0 X4 X5"),
    (0.0420817086+0j, "X0 Z4 X5"),
    (-0.0420817086+0j, "X0 X5"),
    (0.005687376+0j, "Y0 X1 Y2"),
    (-0.0052721056+0j, "Y0 Y1 X2"),
    (-0.03194549195+0j, "Y0 Y1 X2 X3 Y4 Y5"),
    (0.03194549195+0j, "Y0 Y1 X2 Y3 Y4 X5"),
    (-0.0144043803+0j, "Y0 Y1 X2 Z3"),
    (-0.03225585715+0j, "Y0 Y1 X2 Z3 X4"),
    (0.00435703135+0j, "Y0 Y1 X2 Z3 Z4"),
    (0.03225585715+0j, "Y0 Y1 X2 X4 Z5"),
    (-0.0149395093+0j, "Y0 Y1 X2 Z4 Z5"),
    (0.0044758372+0j, "Y0 Y1 X2 Z5"),
    (-0.0075995998+0j, "Y0 Y1 Z2 X3"),
    (0.03083671315+0j, "Y0 Y1 Z2 X3 X4"),
    (0.0075995998+0j, "Y0 Y1 Z2 X3 Z4"),
    (0.03083671315+0j, "Y0 Y1 Z2 Y3 Y4 Z5"),
    (0.02598776945+0j, "Y0 Y1 Z2 Z3 Y4 Y5"),
    (0.02598776945+0j, "Y0 Y1 Z2 X4 X5"),
    (-0.0075572992+0j, "Y0 Y1 Z2 Z4 X5"),
    (0.0075572992+0j, "Y0 Y1 Z2 X5"),
    (-0.0125361754+0j, "Y0 Z1 Y2"),
    (0.0816198499+0j, "Z0"),
    (-0.0065345441+0j, "Z0 X1"),
    (0.0064257161+0j, "Z0 X1 Z2"),
    (0.03225585715+0j, "Z0 X1 X3 Y4 Y5"),
    (-0.03225585715+0j, "Z0 X1 Y3 Y4 X5"),
    (0.01495995835+0j, "Z0 X1 Z3"),
    (0.0329940343+0j, "Z0 X1 Z3 X4"),
    (-0.0037713819+0j, "Z0 X1 Z3 Z4"),
    (-0.0329940343+0j, "Z0 X1 X4 Z5"),
    (0.01570703925+0j, "Z0 X1 Z4 Z5"),
    (-0.0044085394+0j, "Z0 X1 Z5"),
    (0.01742661745+0j, "Z0 Y1 Y2 X3"),
    (0.02598776945+0j, "Z0 Y1 Y2 X3 X4"),
    (-0.01742661745+0j, "Z0 Y1 Y2 X3 Z4"),
    (0.02598776945+0j, "Z0 Y1 Y2 Y3 Y4 Z5"),
    (0.03639776355+0j, "Z0 Y1 Y2 Z3 Y4 Y5"),
    (0.03639776355+0j, "Z0 Y1 Y2 X4 X5"),
    (0.01819461405+0j, "Z0 Y1 Y2 Z4 X5"),
    (-0.01819461405+0j, "Z0 Y1 Y2 X5"),
    (0.0563406733+0j, "Z0 Z1"),
    (0.10700286605+0j, "Z0 Z1 Z2"),
    (-0.00435703135+0j, "Z0 Z1 X3 Y4 Y5"),
    (0.00435703135+0j, "Z0 Z1 Y3 Y4 X5"),
    (0.0797766048+0j, "Z0 Z1 Z3"),
    (-0.0037713819+0j, "Z0 Z1 Z3 X4"),
    (0.0830856456+0j, "Z0 Z1 Z3 Z4"),
    (0.0037713819+0j, "Z0 Z1 X4 Z5"),
    (0.08260395075+0j, "Z0 Z1 Z4 Z5"),
    (0.08374969635+0j, "Z0 Z1 Z5"),
    (0.09820093645+0j, "Z0 Z2"),
    (0.0144043803+0j, "Z0 X3 Y4 Y5"),
    (-0.0144043803+0j, "Z0 Y3 Y4 X5"),
    (0.08762026935+0j, "Z0 Z3"),
    (0.01495995835+0j, "Z0 Z3 X4"),
    (0.0797766048+0j, "Z0 Z3 Z4"),
    (-0.01495995835+0j, "Z0 X4 Z5"),
    (0.0904876464+0j, "Z0 Z4 Z5"),
    (0.08053651195+0j, "Z0 Z5"),
    (-0.0064257161+0j, "X1"),
    (0.01742661745+0j, "X1 X2 X3"),
    (0.02598776945+0j, "X1 X2 X3 X4"),
    (-0.01742661745+0j, "X1 X2 X3 Z4"),
    (0.02598776945+0j, "X1 X2 Y3 Y4 Z5"),
    (0.03639776355+0j, "X1 X2 Z3 Y4 Y5"),
    (0.03639776355+0j, "X1 X2 X4 X5"),
    (0.01819461405+0j, "X1 X2 Z4 X5"),
    (-0.01819461405+0j, "X1 X2 X5"),
    (0.0065345441+0j, "X1 Z2"),
    (-0.03225585715+0j, "X1 Z2 X3 Y4 Y5"),
    (0.03225585715+0j, "X1 Z2 Y3 Y4 X5"),
    (-0.01495995835+0j, "X1 Z2 Z3"),
    (-0.0329940343+0j, "X1 Z2 Z3 X4"),
    (0.0037713819+0j, "X1 Z2 Z3 Z4"),
    (0.0329940343+0j, "X1 Z2 X4 Z5"),
    (-0.01570703925+0j, "X1 Z2 Z4 Z5"),
    (0.0044085394+0j, "X1 Z2 Z5"),
    (0.07858221425+0j, "Z1"),
    (0.0420817086+0j, "Z1 X2 X3"),
    (-0.0075572992+0j, "Z1 X2 X3 X4"),
    (-0.0420817086+0j, "Z1 X2 X3 Z4"),
    (-0.0075572992+0j, "Z1 X2 Y3 Y4 Z5"),
    (0.01819461405+0j, "Z1 X2 Z3 Y4 Y5"),
    (0.01819461405+0j, "Z1 X2 X4 X5"),
    (0.0437092569+0j, "Z1 X2 Z4 X5"),
    (-0.0437092569+0j, "Z1 X2 X5"),
    (-0.0169452601+0j, "Z1 Z2"),
    (0.0149395093+0j, "Z1 Z2 X3 Y4 Y5"),
    (-0.0149395093+0j, "Z1 Z2 Y3 Y4 X5"),
    (0.0904876464+0j, "Z1 Z2 Z3"),
    (0.01570703925+0j, "Z1 Z2 Z3 X4"),
    (0.08260395075+0j, "Z1 Z2 Z3 Z4"),
    (-0.01570703925+0j, "Z1 Z2 X4 Z5"),
    (0.0945051958+0j, "Z1 Z2 Z4 Z5"),
    (0.0836758296+0j, "Z1 Z2 Z5"),
    (-0.0420817086+0j, "X2 X3"),
    (0.0075572992+0j, "X2 X3 X4"),
    (0.0420817086+0j, "X2 X3 Z4"),
    (0.0075572992+0j, "X2 Y3 Y4 Z5"),
    (-0.01819461405+0j, "X2 Z3 Y4 Y5"),
    (-0.01819461405+0j, "X2 X4 X5"),
    (-0.0437092569+0j, "X2 Z4 X5"),
    (0.0437092569+0j, "X2 X5"),
    (0.0200785332+0j, "Z2"),
    (-0.0044758372+0j, "Z2 X3 Y4 Y5"),
    (0.0044758372+0j, "Z2 Y3 Y4 X5"),
    (0.08053651195+0j, "Z2 Z3"),
    (-0.0044085394+0j, "Z2 Z3 X4"),
    (0.08374969635+0j, "Z2 Z3 Z4"),
    (0.0044085394+0j, "Z2 X4 Z5"),
    (0.0836758296+0j, "Z2 Z4 Z5"),
    (0.08535140905+0j, "Z2 Z5"),
    (0.005687376+0j, "X3 X4 X5"),
    (0.0052721056+0j, "X3 Y4 Y5"),
    (0.0196517029+0j, "X3 Z4 X5"),
    (-0.0321878783+0j, "X3 X5"),
    (0.005687376+0j, "Y3 X4 Y5"),
    (-0.0052721056+0j, "Y3 Y4 X5"),
    (-0.0125361754+0j, "Y3 Z4 Y5"),
    (0.0816198499+0j, "Z3"),
    (-0.0065345441+0j, "Z3 X4"),
    (0.0064257161+0j, "Z3 X4 Z5"),
    (0.0563406733+0j, "Z3 Z4"),
    (0.10700286605+0j, "Z3 Z4 Z5"),
    (0.09820093645+0j, "Z3 Z5"),
    (-0.0064257161+0j, "X4"),
    (0.0065345441+0j, "X4 Z5"),
    (0.07858221425+0j, "Z4"),
    (-0.0169452601+0j, "Z4 Z5"),
    (0.0200785332+0j, "Z5")
  ]

paulis, coeffs = parse_hamiltonian_terms(hamiltonian_terms, num_qubits=6)
print(f"Paulis: {paulis}")
print(f"Coeffs: {coeffs}")


